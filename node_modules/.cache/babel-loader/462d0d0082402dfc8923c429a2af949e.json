{"ast":null,"code":"var _jsxFileName = \"/Users/mattairola/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.js\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nexport default function Display({\n  focusDuration,\n  breakDuration,\n  hidden,\n  currentState,\n  focusCount,\n  breakCount,\n  paused,\n  progress\n}) {\n  function displayMain({\n    currentState,\n    focusDuration,\n    breakDuration\n  }) {\n    if (currentState === \"Focusing\") {\n      return `Focusing for ${minutesToDuration(focusDuration)} minutes`;\n    } else if (currentState === \"On Break\") {\n      return `On Break for ${minutesToDuration(breakDuration)} minutes`;\n    }\n  }\n\n  function ticker({\n    currentState,\n    focusCount,\n    breakCount\n  }) {\n    if (currentState === \"Focusing\") {\n      return secondsToDuration(focusCount);\n    } else if (currentState === \"On Break\") {\n      return secondsToDuration(breakCount);\n    }\n  }\n\n  return hidden && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, displayMain({\n    currentState,\n    focusDuration,\n    breakDuration\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, ticker({\n    currentState,\n    focusCount,\n    breakCount\n  }), \" remaining\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, paused))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": progress // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${progress}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/mattairola/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.js"],"names":["minutesToDuration","secondsToDuration","Display","focusDuration","breakDuration","hidden","currentState","focusCount","breakCount","paused","progress","displayMain","ticker","height","width"],"mappings":";AAAA,SAASA,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;AAGA,eAAe,SAASC,OAAT,CAAiB;AAC5BC,EAAAA,aAD4B;AAE5BC,EAAAA,aAF4B;AAG5BC,EAAAA,MAH4B;AAI5BC,EAAAA,YAJ4B;AAK5BC,EAAAA,UAL4B;AAM5BC,EAAAA,UAN4B;AAO5BC,EAAAA,MAP4B;AAQ5BC,EAAAA;AAR4B,CAAjB,EASZ;AAEC,WAASC,WAAT,CAAqB;AAAEL,IAAAA,YAAF;AAAgBH,IAAAA,aAAhB;AAA+BC,IAAAA;AAA/B,GAArB,EAAqE;AACjE,QAAGE,YAAY,KAAK,UAApB,EAAgC;AAC5B,aAAQ,gBAAeN,iBAAiB,CAACG,aAAD,CAAgB,UAAxD;AACH,KAFD,MAEM,IAAGG,YAAY,KAAK,UAApB,EAAgC;AAClC,aAAQ,gBAAeN,iBAAiB,CAACI,aAAD,CAAgB,UAAxD;AACH;AACJ;;AAED,WAASQ,MAAT,CAAgB;AAAEN,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA;AAA5B,GAAhB,EAAyD;AACrD,QAAGF,YAAY,KAAK,UAApB,EAAgC;AAC5B,aAAOL,iBAAiB,CAACM,UAAD,CAAxB;AACH,KAFD,MAEM,IAAGD,YAAY,KAAK,UAApB,EAAgC;AAClC,aAAOL,iBAAiB,CAACO,UAAD,CAAxB;AACH;AACJ;;AAED,SACIH,MAAM,iBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKM,WAAW,CAAC;AAAEL,IAAAA,YAAF;AAAgBH,IAAAA,aAAhB;AAA+BC,IAAAA;AAA/B,GAAD,CADhB,CAFF,eAME;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKQ,MAAM,CAAE;AAACN,IAAAA,YAAD;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA;AAA3B,GAAF,CADX,eANF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,MAAL,CATF,CADF,CAFA,eAeA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEI,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeH,QALjB,CAK0B;AAL1B;AAME,IAAA,KAAK,EAAE;AAAEI,MAAAA,KAAK,EAAG,GAAEJ,QAAS;AAArB,KANT,CAMoC;AANpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAfA,CAFJ;AAkCH","sourcesContent":["import { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\n\nexport default function Display({  \n    focusDuration, \n    breakDuration,\n    hidden,\n    currentState,\n    focusCount,\n    breakCount,\n    paused,\n    progress\n}) {\n\n    function displayMain({ currentState, focusDuration, breakDuration }) {\n        if(currentState === \"Focusing\") {\n            return `Focusing for ${minutesToDuration(focusDuration)} minutes`\n        }else if(currentState === \"On Break\") {\n            return `On Break for ${minutesToDuration(breakDuration)} minutes`\n        }\n    }\n\n    function ticker({ currentState, focusCount, breakCount }){\n        if(currentState === \"Focusing\") {\n            return secondsToDuration(focusCount)\n        }else if(currentState === \"On Break\") {\n            return secondsToDuration(breakCount)\n        }\n    }\n\n    return (\n        hidden && (\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n                {displayMain({ currentState, focusDuration, breakDuration })}\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n                {ticker ({currentState, focusCount, breakCount})} remaining\n            </p>\n            <h2>{paused}</h2>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={progress}// TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${progress}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}