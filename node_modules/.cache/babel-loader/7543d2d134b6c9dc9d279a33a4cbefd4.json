{"ast":null,"code":"var _jsxFileName = \"/Users/mattairola/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.js\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nexport default function Display({\n  isTimerRunning,\n  focusDuration,\n  breakDuration\n}) {\n  // These functions are defined outside of the component to insure they do not have access to state\n  // and are, therefore more likely to be pure.\n\n  /**\n   * Update the session state with new state after each tick of the interval.\n   * @param prevState\n   *  the previous session state\n   * @returns\n   *  new session state with timing information updated.\n   */\n  function nextTick(prevState) {\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n    return { ...prevState,\n      timeRemaining\n    };\n  }\n  /**\n   * Higher order function that returns a function to update the session state with the next session type upon timeout.\n   * @param focusDuration\n   *    the current focus duration\n   * @param breakDuration\n   *    the current break duration\n   * @returns\n   *  function to update the session state.\n   */\n\n\n  function nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return currentSession => {\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n  /**\n  * Custom hook that invokes the callback function every second(this goes inside Pomodoro)\n  *\n  * NOTE: You will not need to make changes to the callback function\n  */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n\n  function displayMain() {\n    if (!isTimerRunning) {\n      return `${minutesToDuration(focusDuration)}`;\n    }\n  }\n\n  function countdown() {\n    if (!isTimerRunning) {\n      return `${secondsToDuration(focusDuration * 60)}`;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, displayMain()), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, countdown()))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: \"0%\"\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 15\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/mattairola/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.js"],"names":["React","useState","minutesToDuration","secondsToDuration","Display","isTimerRunning","focusDuration","breakDuration","nextTick","prevState","timeRemaining","Math","max","nextSession","currentSession","label","useInterval","session","Audio","play","setSession","displayMain","countdown","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nexport default function Display({ \n    isTimerRunning, \n    focusDuration, \n    breakDuration \n}) {\n\n    // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n    const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n    return {\n      ...prevState,\n      timeRemaining,\n    };\n  }\n  \n  /**\n   * Higher order function that returns a function to update the session state with the next session type upon timeout.\n   * @param focusDuration\n   *    the current focus duration\n   * @param breakDuration\n   *    the current break duration\n   * @returns\n   *  function to update the session state.\n   */\n  function nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return (currentSession) => {\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60,\n        };\n      }\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60,\n      };\n    };\n  }\n\n    /**\n   * Custom hook that invokes the callback function every second(this goes inside Pomodoro)\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n     useInterval(() => {\n        if (session.timeRemaining === 0) {\n          new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n          return setSession(nextSession(focusDuration, breakDuration));\n        }\n        return setSession(nextTick);\n      },\n      isTimerRunning ? 1000 : null\n    );\n\n    \n\n    function displayMain() {\n        if(!isTimerRunning){\n            return `${minutesToDuration(focusDuration)}`\n        }\n    \n    }\n\n    function countdown() {\n        if(!isTimerRunning){\n            return `${secondsToDuration(focusDuration*60)}`\n        }\n    }\n    \n    return (\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n                {displayMain()}\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n                {countdown()}\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}