{"ast":null,"code":"var _jsxFileName = \"/Users/mattairola/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.js\";\nimport React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nexport default function Display({\n  isTimerRunning,\n  focusDuration,\n  breakDuration\n}) {\n  function mainTimer() {\n    if (!isTimerRunning) {\n      return `Focusing for ${minutesToDuration(focusDuration)}`;\n    } else {\n      return `On Break for ${minutesToDuration(breakDuration)}`;\n    }\n  }\n\n  function remainingTime() {\n    const time = secondsToDuration(breakDuration);\n    return `${time} remaining`;\n  }\n  /**\n  * Higher order function that returns a function to update the session state with the next session type upon timeout.\n  * @param focusDuration\n  *    the current focus duration\n  * @param breakDuration\n  *    the current break duration\n  * @returns\n  *  function to update the session state.\n  */\n\n\n  function nextSession(focusDuration, breakDuration) {\n    /**\n     * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n     */\n    return currentSession => {\n      if (currentSession.label === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n\n  if (!isTimerRunning) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, mainTimer()), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, nextSession))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: \"0%\"\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    })))));\n  } else {\n    return null;\n  }\n}","map":{"version":3,"sources":["/Users/mattairola/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.js"],"names":["React","minutesToDuration","secondsToDuration","Display","isTimerRunning","focusDuration","breakDuration","mainTimer","remainingTime","time","nextSession","currentSession","label","timeRemaining","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;AAEA,eAAe,SAASC,OAAT,CAAiB;AAC5BC,EAAAA,cAD4B;AAE5BC,EAAAA,aAF4B;AAG5BC,EAAAA;AAH4B,CAAjB,EAIZ;AAEC,WAASC,SAAT,GAAqB;AACjB,QAAG,CAACH,cAAJ,EAAoB;AAChB,aAAQ,gBAAeH,iBAAiB,CAACI,aAAD,CAAgB,EAAxD;AACH,KAFD,MAEK;AACD,aAAQ,gBAAeJ,iBAAiB,CAACK,aAAD,CAAgB,EAAxD;AACH;AACJ;;AAED,WAASE,aAAT,GAAyB;AACrB,UAAMC,IAAI,GAAGP,iBAAiB,CAACI,aAAD,CAA9B;AACA,WACK,GAAEG,IAAK,YADZ;AAGH;AAEG;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASC,WAAT,CAAqBL,aAArB,EAAoCC,aAApC,EAAmD;AAC/C;AACR;AACA;AACQ,WAAQK,cAAD,IAAoB;AAC3B,UAAIA,cAAc,CAACC,KAAf,KAAyB,UAA7B,EAAyC;AACrC,eAAO;AACPA,UAAAA,KAAK,EAAE,UADA;AAEPC,UAAAA,aAAa,EAAEP,aAAa,GAAG;AAFxB,SAAP;AAIH;;AACD,aAAO;AACHM,QAAAA,KAAK,EAAE,UADJ;AAEHC,QAAAA,aAAa,EAAER,aAAa,GAAG;AAF5B,OAAP;AAIC,KAXD;AAYH;;AAGD,MAAG,CAACD,cAAJ,EAAmB;AAEnB,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEG,SAAS,EADX,CAFF,eAME;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACIG,WADJ,CANF,CADF,CAFA,eAcA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEI,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBAAc,GALhB,CAKoB;AALpB;AAME,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OANT,CAM0B;AAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAdA,CADJ;AA+BC,GAjCD,MAiCK;AACD,WAAO,IAAP;AACH;AACJ","sourcesContent":["import React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nexport default function Display({ \n    isTimerRunning, \n    focusDuration, \n    breakDuration \n}) {\n\n    function mainTimer() {\n        if(!isTimerRunning) {\n            return `Focusing for ${minutesToDuration(focusDuration)}`\n        }else{\n            return `On Break for ${minutesToDuration(breakDuration)}`\n        }\n    }\n\n    function remainingTime() {\n        const time = secondsToDuration(breakDuration);\n        return (\n            `${time} remaining`\n        )\n    }\n\n        /**\n     * Higher order function that returns a function to update the session state with the next session type upon timeout.\n     * @param focusDuration\n     *    the current focus duration\n     * @param breakDuration\n     *    the current break duration\n     * @returns\n     *  function to update the session state.\n     */\n    function nextSession(focusDuration, breakDuration) {\n        /**\n         * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n         */\n        return (currentSession) => {\n        if (currentSession.label === \"Focusing\") {\n            return {\n            label: \"On Break\",\n            timeRemaining: breakDuration * 60,\n            };\n        }\n        return {\n            label: \"Focusing\",\n            timeRemaining: focusDuration * 60,\n        };\n        };\n    }\n    \n\n    if(!isTimerRunning){ \n    \n    return (\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n             {mainTimer()}\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n               {nextSession}\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n    }else{\n        return null;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}