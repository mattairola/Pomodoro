{"ast":null,"code":"var _jsxFileName = \"/Users/mattairola/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.js\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\nexport default function Display({\n  isTimerRunning,\n  focusDuration,\n  breakDuration,\n  hidden,\n  currentState,\n  breakCount,\n  focusCount\n}) {\n  function displayMain({\n    focusDuration,\n    breakDuration\n  }) {\n    if (currentState === \"Focusing\") {\n      return `Focusing for ${minutesToDuration(focusDuration)} minutes`;\n    } else {\n      return `On Break for ${minutesToDuration(breakDuration)} minutes`;\n    }\n  }\n\n  function ticker({\n    focusDuration,\n    breakDuration\n  }) {\n    if (currentState === \"Focusing\") {\n      return secondsToDuration(focusDuration * 60);\n    } else {\n      return secondsToDuration(breakDuration * 60);\n    }\n  }\n\n  function nextSession(focusDuration, breakDuration) {\n    return currentState => {\n      if (currentState === \"Focusing\") {\n        return {\n          label: \"On Break\",\n          timeRemaining: breakDuration * 60\n        };\n      }\n\n      return {\n        label: \"Focusing\",\n        timeRemaining: focusDuration * 60\n      };\n    };\n  }\n\n  return hidden && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, displayMain({\n    focusDuration,\n    breakDuration\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \"remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": \"0\" // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: \"0%\"\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  })))));\n} // useInterval(() => {\n//   if (focusCount === 0 || breakCount === 0) {\n//   new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n//   // return setSession(nextSession(focusDuration, breakDuration));\n// }\n// else if(focusCount > 0){\n//   setFocusCount((focusCount) => focusCount - 1);\n// }else if(breakCount > 0){\n//   setBreakCount((prevCount) => prevCount - 1);\n//   }\n// },\n// isTimerRunning ? 1000 : null\n// )}\n// // -----------\n// //before pomodoro\n// // These functions are defined outside of the component to insure they do not have access to state\n// // and are, therefore more likely to be pure.\n// /**\n//  * Update the session state with new state after each tick of the interval.\n//  * @param prevState\n//  *  the previous session state\n//  * @returns\n//  *  new session state with timing information updated.\n//  */\n//  function nextTick(prevState) {\n//     const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n//     return {\n//       ...prevState,\n//       timeRemaining,\n//     };\n//   }\n//   /**\n//    * Higher order function that returns a function to update the session state with the next session type upon timeout.\n//    * @param focusDuration\n//    *    the current focus duration\n//    * @param breakDuration\n//    *    the current break duration\n//    * @returns\n//    *  function to update the session state.\n//    */\n//   function nextSession(focusDuration, breakDuration) {\n//     /**\n//      * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n//      */\n//     return (currentSession) => {\n//       if (currentSession.label === \"Focusing\") {\n//         return {\n//           label: \"On Break\",\n//           timeRemaining: breakDuration * 60,\n//         };\n//       }\n//       return {\n//         label: \"Focusing\",\n//         timeRemaining: focusDuration * 60,\n//       };\n//     };\n//   }\n//   -------------\n//   within pomodoro\n\n/**\n * Custom hook that invokes the callback function every second\n *\n * NOTE: You will not need to make changes to the callback function\n */\n//    useInterval(() => {\n//     if (session.timeRemaining === 0) {\n//       new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n//       return setSession(nextSession(focusDuration, breakDuration));\n//     }\n//     return setSession(nextTick);\n//   },\n//   isTimerRunning ? 1000 : null\n// );\n\n/**\n * Called whenever the play/pause button is clicked.\n */\n// function playPause() {\n//   setIsTimerRunning((prevState) => {\n//     const nextState = !prevState;\n//     if (nextState) {\n//       setSession((prevStateSession) => {\n//         // If the timer is starting and the previous session is null,\n//         // start a focusing session.\n//         if (prevStateSession === null) {\n//           return {\n//             label: \"Focusing\",\n//             timeRemaining: focusDuration * 60,\n//           };\n//         }\n//         return prevStateSession;\n//       });\n//     }\n//     return nextState;\n//   });\n// }","map":{"version":3,"sources":["/Users/mattairola/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Display.js"],"names":["React","useState","minutesToDuration","secondsToDuration","useInterval","Display","isTimerRunning","focusDuration","breakDuration","hidden","currentState","breakCount","focusCount","displayMain","ticker","nextSession","label","timeRemaining","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\n\nexport default function Display({ \n    isTimerRunning, \n    focusDuration, \n    breakDuration,\n    hidden,\n    currentState,\n    breakCount,\n    focusCount\n}) {\n\n    function displayMain({ focusDuration, breakDuration }) {\n        if(currentState === \"Focusing\") {\n            return `Focusing for ${minutesToDuration(focusDuration)} minutes`\n        }else{\n            return `On Break for ${minutesToDuration(breakDuration)} minutes`\n        }\n    }\n\n    function ticker({ focusDuration, breakDuration }){\n        if(currentState === \"Focusing\") {\n            return secondsToDuration(focusDuration*60)\n        }else{\n            return secondsToDuration(breakDuration*60)\n        }\n    }\n  \n\n      function nextSession(focusDuration, breakDuration) {\n    return (currentState) => {\n      if (currentState === \"Focusing\") {\n        return {\n          label: \"On Break\",\n              timeRemaining: breakDuration * 60,\n            };\n          }\n          return {\n            label: \"Focusing\",\n            timeRemaining: focusDuration * 60,\n          };\n        };\n      }\n\n    return (\n        hidden && (\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n                {displayMain({ focusDuration, breakDuration })}\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n                remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n    )\n}\n\n\n// useInterval(() => {\n//   if (focusCount === 0 || breakCount === 0) {\n//   new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n//   // return setSession(nextSession(focusDuration, breakDuration));\n// }\n// else if(focusCount > 0){\n//   setFocusCount((focusCount) => focusCount - 1);\n// }else if(breakCount > 0){\n//   setBreakCount((prevCount) => prevCount - 1);\n//   }\n// },\n// isTimerRunning ? 1000 : null\n// )}\n\n// // -----------\n// //before pomodoro\n// // These functions are defined outside of the component to insure they do not have access to state\n// // and are, therefore more likely to be pure.\n\n// /**\n//  * Update the session state with new state after each tick of the interval.\n//  * @param prevState\n//  *  the previous session state\n//  * @returns\n//  *  new session state with timing information updated.\n//  */\n//  function nextTick(prevState) {\n//     const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n//     return {\n//       ...prevState,\n//       timeRemaining,\n//     };\n//   }\n  \n//   /**\n//    * Higher order function that returns a function to update the session state with the next session type upon timeout.\n//    * @param focusDuration\n//    *    the current focus duration\n//    * @param breakDuration\n//    *    the current break duration\n//    * @returns\n//    *  function to update the session state.\n//    */\n//   function nextSession(focusDuration, breakDuration) {\n//     /**\n//      * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n//      */\n//     return (currentSession) => {\n//       if (currentSession.label === \"Focusing\") {\n//         return {\n//           label: \"On Break\",\n//           timeRemaining: breakDuration * 60,\n//         };\n//       }\n//       return {\n//         label: \"Focusing\",\n//         timeRemaining: focusDuration * 60,\n//       };\n//     };\n//   }\n  \n\n\n//   -------------\n//   within pomodoro\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n//    useInterval(() => {\n//     if (session.timeRemaining === 0) {\n//       new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n//       return setSession(nextSession(focusDuration, breakDuration));\n//     }\n//     return setSession(nextTick);\n//   },\n//   isTimerRunning ? 1000 : null\n// );\n\n/**\n * Called whenever the play/pause button is clicked.\n */\n// function playPause() {\n//   setIsTimerRunning((prevState) => {\n//     const nextState = !prevState;\n//     if (nextState) {\n//       setSession((prevStateSession) => {\n//         // If the timer is starting and the previous session is null,\n//         // start a focusing session.\n        \n//         if (prevStateSession === null) {\n//           return {\n//             label: \"Focusing\",\n//             timeRemaining: focusDuration * 60,\n//           };\n//         }\n//         return prevStateSession;\n//       });\n//     }\n//     return nextState;\n//   });\n// }\n\n\n\n"]},"metadata":{},"sourceType":"module"}